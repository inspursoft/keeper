define("ace/ext/beautify", ["require", "exports", "module", "ace/token_iterator"], function (e, F, t) {
    "use strict";

    function S(e, t) {
        return -1 < e.type.lastIndexOf(t + ".xml")
    }

    var K = e("../token_iterator").TokenIterator;
    F.singletonTags = ["area", "base", "br", "col", "command", "embed", "hr", "html", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"], F.blockTags = ["article", "aside", "blockquote", "body", "div", "dl", "fieldset", "footer", "form", "head", "header", "html", "nav", "ol", "p", "script", "section", "style", "table", "tbody", "tfoot", "thead", "ul"], F.beautify = function (e) {
        for (var t, r, a, o = new K(e, 0, 0), s = o.getCurrentToken(), n = e.getTabString(), i = F.singletonTags, c = F.blockTags, u = !1, m = !1, l = !1, p = "", f = "", h = "", d = 0, b = 0, g = 0, y = 0, k = 0, $ = 0, w = 0, x = 0, v = 0, T = !1, R = !1, O = !1, q = !1, C = {0: 0}, I = [], _ = function () {
            t && t.value && "string.regexp" !== t.type && (t.value = t.value.trim())
        }, j = function () {
            p = p.replace(/ +$/, "")
        }, B = function () {
            p = p.trimRight(), u = !1
        }; null !== s;) {
            if (x = o.getCurrentTokenRow(), o.$rowTokens, t = o.stepForward(), void 0 !== s) {
                if (f = s.value, k = 0, O = "style" === h || "ace/mode/css" === e.$modeId, S(s, "tag-open") ? (R = !0, t && (q = -1 !== c.indexOf(t.value)), "</" === f && (q && !u && v < 1 && v++, O && (v = 1), q = !(k = 1))) : S(s, "tag-close") ? R = !1 : S(s, "comment.start") ? q = !0 : S(s, "comment.end") && (q = !1), R || v || "paren.rparen" !== s.type || "}" !== s.value.substr(0, 1) || v++, x !== r && (v = x, r && (v -= r)), v) {
                    for (B(); 0 < v; v--) p += "\n";
                    u = !0, S(s, "comment") || s.type.match(/^(comment|string)$/) || (f = f.trimLeft())
                }
                if (f) {
                    if ("keyword" === s.type && f.match(/^(if|else|elseif|for|foreach|while|switch)$/) ? (I[d] = f, _(), l = !0, f.match(/^(else|elseif)$/) && p.match(/\}[\s]*$/) && (B(), m = !0)) : "paren.lparen" === s.type ? (_(), "{" === f.substr(-1) && (T = !(l = !0), R || (v = 1)), "{" === f.substr(0, 1) && (m = !0, "[" !== p.substr(-1) && "[" === p.trimRight().substr(-1) ? (B(), m = !1) : (")" === p.trimRight().substr(-1) ? B : j)())) : "paren.rparen" === s.type ? (k = 1, "}" === f.substr(0, 1) && ("case" === I[d - 1] && k++, "{" === p.trimRight().substr(-1) ? B() : (m = !0, O && (v += 2))), "]" === f.substr(0, 1) && "}" !== p.substr(-1) && "}" === p.trimRight().substr(-1) && (m = !1, y++, B()), ")" === f.substr(0, 1) && "(" !== p.substr(-1) && "(" === p.trimRight().substr(-1) && (m = !1, y++, B()), j()) : "keyword.operator" !== s.type && "keyword" !== s.type || !f.match(/^(=|==|===|!=|!==|&&|\|\||and|or|xor|\+=|.=|>|>=|<|<=|=>)$/) ? "punctuation.operator" === s.type && ";" === f ? (B(), _(), l = !0, O && v++) : "punctuation.operator" === s.type && f.match(/^(:|,)$/) ? (B(), _(), f.match(/^(,)$/) && 0 < w && 0 === $ ? v++ : u = !(l = !0)) : "support.php_tag" !== s.type || "?>" !== f || u ? S(s, "attribute-name") && p.substr(-1).match(/^\s$/) ? m = !0 : S(s, "attribute-equals") ? (j(), _()) : S(s, "tag-close") && (j(), "/>" === f && (m = !0)) : (B(), m = !0) : (B(), _(), l = m = !0), u && (!s.type.match(/^(comment)$/) || f.substr(0, 1).match(/^[/#]$/)) && (!s.type.match(/^(string)$/) || f.substr(0, 1).match(/^['"]$/))) {
                        if (y = g, b < d) for (y++, a = d; b < a; a--) C[a] = y; else d < b && (y = C[d]);
                        for (b = d, g = y, k && (y -= k), T && !$ && (y++, T = !1), a = 0; a < y; a++) p += n
                    }
                    if ("keyword" === s.type && f.match(/^(case|default)$/) && (I[d] = f, d++), "keyword" === s.type && f.match(/^(break)$/) && I[d - 1] && I[d - 1].match(/^(case|default)$/) && d--, "paren.lparen" === s.type && ($ += (f.match(/\(/g) || []).length, w += (f.match(/\{/g) || []).length, d += f.length), "keyword" === s.type && f.match(/^(if|else|elseif|for|while)$/) ? (T = !0, $ = 0) : !$ && f.trim() && "comment" !== s.type && (T = !1), "paren.rparen" === s.type) for ($ -= (f.match(/\)/g) || []).length, w -= (f.match(/\}/g) || []).length, a = 0; a < f.length; a++) d--, "}" === f.substr(a, 1) && "case" === I[d] && d--;
                    m && !u && (j(), "\n" !== p.substr(-1) && (p += " ")), p += f, l && (p += " "), l = m = u = !1, (S(s, "tag-close") && (q || -1 !== c.indexOf(h)) || S(s, "doctype") && ">" === f) && (v = q && t && "</" === t.value ? -1 : 1), S(s, "tag-open") && "</" === f ? d-- : S(s, "tag-open") && "<" === f && -1 === i.indexOf(t.value) ? d++ : S(s, "tag-name") ? h = f : S(s, "tag-close") && "/>" === f && -1 === i.indexOf(h) && d--, r = x
                }
            }
            s = t
        }
        p = p.trim(), e.doc.setValue(p)
    }, F.commands = [{
        name: "beautify", description: "Format selection (Beautify)", exec: function (e) {
            F.beautify(e.session)
        }, bindKey: "Ctrl-Shift-B"
    }]
}), window.require(["ace/ext/beautify"], function (e) {
    "object" == typeof module && "object" == typeof exports && module && (module.exports = e)
});
